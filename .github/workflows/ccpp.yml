name: C/C++ CI

on: 
  schedule:
    # Every day
    - cron:  '0 0 * * *'
  push:

jobs:
  BuildCoreM:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Arduino Configs
      run: |
        wget https://www.arduino.cc/download.php?f=/arduino-nightly-linux64.tar.xz
        tar -xvf *.tar.xz
        git clone https://github.com/IncoCura/IncoFWUpdate
        mkdir -p ~/output
        pwd
    - name: Core M Config
      run: |
        export PATH=$PATH:buildroot/bin
        use_example_configs Corem
        cd Marlin
        make clean
        make ARDUINO_INSTALL_DIR=../arduino-nightly AVR_TOOLS_PATH=../arduino-nightly/hardware/tools/avr/bin/ USE_CCACHE_FOR_BUILD=0 -j12
        mv applet/Marlin.hex ~/output/CoreM_$(date "+%Y%m%d%H").hex
        cd ..
    - name: Upload Build artifact
      uses: actions/upload-artifact@v2
      with:
        name: CoreMHex
        path: '~/output/CoreM_*.hex'
  BuildMieum:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Arduino Configs
      run: |
        wget https://www.arduino.cc/download.php?f=/arduino-nightly-linux64.tar.xz
        tar -xvf *.tar.xz
        git clone https://github.com/IncoCura/IncoFWUpdate
        mkdir -p ~/output
        pwd
    - name: Mieum(Private) Config
      run: |
        export PATH=$PATH:buildroot/bin
        use_example_configs Mieum
        cd Marlin
        make clean
        make ARDUINO_INSTALL_DIR=../arduino-nightly AVR_TOOLS_PATH=../arduino-nightly/hardware/tools/avr/bin/ USE_CCACHE_FOR_BUILD=0 -j12
        mv applet/Marlin.hex  ~/output/Mieum_HomePV_$(date "+%Y%m%d%H").hex
        cd ..
    - name: Upload Build artifact
      uses: actions/upload-artifact@v2
      with:
        name: MieumHex
        path: '~/output/Mieum*.hex'
    
  BuildAnatzToy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Arduino Configs
      run: |
        wget https://www.arduino.cc/download.php?f=/arduino-nightly-linux64.tar.xz
        tar -xvf *.tar.xz
        git clone https://github.com/IncoCura/IncoFWUpdate
        mkdir -p ~/output
        pwd
    - name: Anatz TOY Printer Config
      run: |
        export PATH=$PATH:buildroot/bin
        use_example_configs anatztoy
        cd Marlin
        make clean
        make ARDUINO_INSTALL_DIR=../arduino-nightly AVR_TOOLS_PATH=../arduino-nightly/hardware/tools/avr/bin/ USE_CCACHE_FOR_BUILD=0 -j12
        mv applet/Marlin.hex ~/output/AnatzToy_$(date "+%Y%m%d%H").hex
        cd ..
    - name: Upload Build artifact
      uses: actions/upload-artifact@v2
      with:
        name: AnatzToyHex
        path: '~/output/AnatzToy_*.hex'
  
  BuildCore200:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Arduino Configs
      run: |
        wget https://www.arduino.cc/download.php?f=/arduino-nightly-linux64.tar.xz
        tar -xvf *.tar.xz
        git clone https://github.com/IncoCura/IncoFWUpdate
        mkdir -p ~/output
        pwd
    - name: Core 200 Printer Config
      run: |
        export PATH=$PATH:buildroot/bin
        use_example_configs Core200
        cd Marlin
        make clean
        make ARDUINO_INSTALL_DIR=../arduino-nightly AVR_TOOLS_PATH=../arduino-nightly/hardware/tools/avr/bin/ USE_CCACHE_FOR_BUILD=0 -j12
        mv applet/Marlin.hex ~/output/Core200_$(date "+%Y%m%d%H").hex
        cd ..
    - name: Upload Build artifact
      uses: actions/upload-artifact@v2
      with:
        name: Core200Hex
        path: '~/output/Core200_*.hex'

  BuildSlideFast:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Arduino Configs
      run: |
        wget https://www.arduino.cc/download.php?f=/arduino-nightly-linux64.tar.xz
        tar -xvf *.tar.xz
        git clone https://github.com/IncoCura/IncoFWUpdate
        mkdir -p ~/output
        pwd
    - name: SlideFast Printer Config
      run: |
        export PATH=$PATH:buildroot/bin
        use_example_configs SlideFast
        cd Marlin
        make clean
        make ARDUINO_INSTALL_DIR=../arduino-nightly AVR_TOOLS_PATH=../arduino-nightly/hardware/tools/avr/bin/ USE_CCACHE_FOR_BUILD=0 -j12
        mv applet/Marlin.hex ~/output/SlideFast_$(date "+%Y%m%d%H").hex
        cd ..
        ls ~/output/
    - name: Upload Build artifact
      uses: actions/upload-artifact@v2
      with:
        name: SlideFastHex
        path: '~/output/SlideFast_*.hex'

  BuildCoreMMulti:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Arduino Configs
      run: |
        wget https://www.arduino.cc/download.php?f=/arduino-nightly-linux64.tar.xz
        tar -xvf *.tar.xz
        git clone https://github.com/IncoCura/IncoFWUpdate
        mkdir -p ~/output
        pwd
    - name: CoreM Multi Printer Config
      run: |
        export PATH=$PATH:buildroot/bin
        use_example_configs CoreM_Multi
        cd Marlin
        make clean
        make ARDUINO_INSTALL_DIR=../arduino-nightly AVR_TOOLS_PATH=../arduino-nightly/hardware/tools/avr/bin/ USE_CCACHE_FOR_BUILD=0 -j12
        mv applet/Marlin.hex ~/output/CoreM_Multi_$(date "+%Y%m%d%H").hex
        cd ..
        ls ~/output/
    - name: Upload Build artifact
      uses: actions/upload-artifact@v2
      with:
        name: CoreM_MultiHex
        path: '~/output/CoreM_Multi_*.hex'
  upload_release:
    name: Upload those files to release
    needs: [BuildCoreM, BuildMieum, BuildAnatzToy, BuildCore200, BuildSlideFast, BuildCoreMMulti]
    runs-on: ubuntu-latest
    steps:
      - name: Download CoreM
        uses: actions/download-artifact@v2
        with:
          name: CoreMHex
      - name: Download Mieum
        uses: actions/download-artifact@v2
        with:
          name: MieumHex
      - name: Download AnatzToy
        uses: actions/download-artifact@v2
        with:
          name: AnatzToyHex
      - name: Download core200
        uses: actions/download-artifact@v2
        with:
          name: Core200Hex
      - name: Download SlideFast
        uses: actions/download-artifact@v2
        with:
          name: SlideFastHex
      - name: Download CoreMMulti
        uses: actions/download-artifact@v2
        with:
          name: CoreM_MultiHex
      - name: Set an output
        id: get-date
        run: |
          echo ::set-output name=date::$(/bin/date "+%Y%m%d%H")
      - shell: bash
        run: |
          ls -la
          zip -r ${{ steps.get-date.outputs.date }}_HEX.zip *.hex
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.get-date.outputs.date }}
          release_name: Release ${{ steps.get-date.outputs.date }}
          body: |
            Github action automated release
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ steps.get-date.outputs.date }}_HEX.zip
          asset_name: ${{ steps.get-date.outputs.date }}_HEX.zip
          asset_content_type: application/zip